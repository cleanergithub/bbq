// Generated by CoffeeScript 1.3.3
(function() {

  $.getJSON("2012season.json").done(function(data) {
    var bbq, bbqRight, bothRight, bothWrong, html, team, teamBbqA, teamBbqs, ydsRight;
    teamBbqs = {};
    html = "<table class='table table-condensed table-hover'>";
    data.forEach(function(week, index) {
      html += "<tr><th>Week " + (index + 1) + "</th>";
      week.forEach(function(game, index) {
        var loser, team, teams, winner, _fn;
        teams = (function() {
          var _results;
          _results = [];
          for (team in game) {
            _results.push(team);
          }
          return _results;
        })();
        game[teams[0]].NY = game[teams[0]].OY - game[teams[0]].DY;
        game[teams[1]].NY = game[teams[1]].OY - game[teams[1]].DY;
        if (parseInt(game[teams[0]].P) >= parseInt(game[teams[1]].P)) {
          winner = game[teams[0]];
          loser = game[teams[1]];
        } else {
          winner = game[teams[1]];
          loser = game[teams[0]];
        }
        if (winner.T >= loser.T && winner.NY >= loser.NY) {
          html += "<td class='same'>";
        } else if (winner.T < loser.T && winner.NY < loser.NY) {
          html += "<td class='both-wrong' style='background-color: lightyellow;'>";
        } else if (winner.T >= loser.T && winner.NY < loser.NY) {
          html += "<td class='bbq-right' style='background-color: lightgreen;'>";
        } else if (winner.T < loser.T && winner.NY > loser.NY) {
          html += "<td class='yds-right' style='background-color: lightcoral;'>";
        }
        _fn = function(team, data) {
          if (!(teamBbqs[team] != null)) {
            teamBbqs[team] = {
              T: 0,
              O: 0,
              D: 0
            };
          }
          teamBbqs[team].T += parseInt(data.T) / 16;
          teamBbqs[team].O += parseInt(data.O) / 16;
          teamBbqs[team].D += parseInt(data.D) / 16;
          return html += "" + team + " " + game[team].P + " " + game[team].T + "<br/>";
        };
        for (team in game) {
          data = game[team];
          _fn(team, data);
        }
        return html += "</td>";
      });
      return html += "</tr>";
    });
    html += "</table>";
    $("div[role='main']").append(html);
    $("tr").each(function(index, element) {
      var bbqRightEls, bothWrongEls, sameEls, ydsRightEls;
      sameEls = $(".same", element);
      bothWrongEls = $(".both-wrong", element);
      ydsRightEls = $(".yds-right", element);
      bbqRightEls = $(".bbq-right", element);
      return $(element).append(bbqRightEls).append(ydsRightEls).append(bothWrongEls).append(sameEls);
    });
    bothRight = $(".same").length;
    bothWrong = $(".both-wrong").lengh;
    bbqRight = $(".bbq-right").length;
    ydsRight = $(".yds-right").length;
    $("div[role='main']").append("<p>bbq better " + bbqRight + " times</p>");
    $("div[role='main']").append("<p>bbq worse " + ydsRight + " times</p>");
    $("div[role='main']").append("<p>both right " + bothRight + " times</p>");
    $("div[role='main']").append("<p>both wrong " + bothWrong + " times</p>");
    teamBbqA = (function() {
      var _results;
      _results = [];
      for (team in teamBbqs) {
        bbq = teamBbqs[team];
        _results.push([team, bbq]);
      }
      return _results;
    })();
    teamBbqA.sort(function(a, b) {
      return b[1].T - a[1].T;
    });
    $("div[role='main']").append("<h2>Season Team BBQs</h2>");
    html = '<table>';
    teamBbqA.forEach(function(team) {
      return html += "<tr><td><sup>" + (Math.round(team[1].O)) + "</sup>" + team[0] + "</td><td>" + (Math.round(team[1].T)) + "<sub>" + (Math.round(team[1].D)) + "</sub></td></tr>";
    });
    html += "</table>";
    return $("div[role='main']").append(html);
  });

}).call(this);
